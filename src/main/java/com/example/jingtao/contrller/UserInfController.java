package com.example.jingtao.contrller;

import com.example.jingtao.entity.ResultEntity;
import com.example.jingtao.entity.UserInf;
import com.example.jingtao.service.UserInfService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

@RestController
@RequestMapping("/userInf")
public class UserInfController {
    @Autowired
    private UserInfService userInfService;

    /**
     * @api {POST} /userInf/addAUserInf addAUserInf
     * @apiVersion 6.0.0
     * @apiGroup UserInfController
     * @apiName addAUserInf
     * @apiDescription 添加一个用户信息 openid  昵称 头像链接
     * @apiParam (请求参数) {String} openid
     * @apiParam (请求参数) {String} nickname
     * @apiParam (请求参数) {String} headImg
     * @apiParamExample 请求参数示例
     * headImg=jKwZ8chi4W&openid=qxKx&nickname=c4l
     * @apiSuccess (响应结果) {Number} code
     * @apiSuccess (响应结果) {String} msg
     * @apiSuccess (响应结果) {Object} data
     * @apiSuccessExample 响应结果示例
     * {"msg":"15VKd","code":4128,"data":{}}
     */
    @RequestMapping("/addAUserInf")
    public ResultEntity addAUserInf( UserInf userInf) {
        UserInf userInf1 = userInfService.selectByOpenid(userInf);
        if (userInf1 == null) {
            userInfService.addAUserInf(userInf);
            return ResultEntity.success("ok", null);
        } else {
            return ResultEntity.error("该数据已存在", userInf1);
        }
    }

    /**
     * @api {POST} /userInf/updateUserInf updateUserInf
     * @apiVersion 6.0.0
     * @apiGroup UserInfController
     * @apiName updateUserInf
     * @apiDescription 更新一个用户信息
     * @apiParam (请求参数) {String} openid This field was generated by MyBatis Generator.      This field corresponds to the database column userinf.openid
     * @apiParam (请求参数) {String} nickname This field was generated by MyBatis Generator.      This field corresponds to the database column userinf.nickname
     * @apiParam (请求参数) {String} headImg This field was generated by MyBatis Generator.      This field corresponds to the database column userinf.head_img
     * @apiParamExample 请求参数示例
     * headImg=Uirs9ZI&openid=H&nickname=2GaV3
     * @apiSuccess (响应结果) {Number} code
     * @apiSuccess (响应结果) {String} msg
     * @apiSuccess (响应结果) {Object} data
     * @apiSuccessExample 响应结果示例
     * {"msg":"BQC6I","code":6210,"data":{}}
     */
    @RequestMapping("/updateUserInf")
    public ResultEntity updateUserInf(UserInf userInf) {
        UserInf userInf1 = userInfService.selectByOpenid(userInf);
        if (userInf1 == null) {
            userInfService.addAUserInf(userInf);
            return ResultEntity.success("插入成功", null);
        } else {
            userInfService.updateUserInf(userInf);
            return ResultEntity.success("更新成功", null);
        }
    }

    /**
     * @api {POST} /userInf/getUserInfByOpenid getUserInfByOpenid
     * @apiVersion 6.0.0
     * @apiGroup UserInfController
     * @apiName getUserInfByOpenid
     * @apiDescription 通过openid获取用户信息  可以判断该用户是否已经存在信息 来决定调用更新还是增加
     * @apiParam (请求参数) {String} openid
     * @apiParamExample 请求参数示例
     * openid=0XfWY
     * @apiSuccess (响应结果) {Number} code
     * @apiSuccess (响应结果) {String} msg
     * @apiSuccess (响应结果) {Object} data
     * @apiSuccessExample 响应结果示例
     * {"msg":"GlNdhP3huo","code":1548,"data":{}}
     */
    @RequestMapping("/getUserInfByOpenid")
    public ResultEntity getUserInfByOpenid(String openid) {
        UserInf userInf = userInfService.selectByOpenid(new UserInf(openid, null, null));
        return ResultEntity.success("ok", userInf);
    }
}
